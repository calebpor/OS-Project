#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define FRAME_SIZE 4096
#define NUM_FRAMES 4 // Reduced number of physical memory frames
#define MAX_PAGES 32 // Maximum virtual memory pages

typedef struct Frame {
    int process_id;   // ID of the process using the frame
    int page_number;  // Page number mapped to this frame
} Frame;

typedef struct PCB {
    int process_id;
    int page_table[MAX_PAGES]; // Maps virtual pages to frames; -1 if not loaded
} PCB;

// Global memory simulation
Frame physical_memory[NUM_FRAMES];
int clock_time = 0; // Simulated time for FIFO tracking

// Initialize physical memory and process page tables
void initialize_memory() {
    for (int i = 0; i < NUM_FRAMES; i++) {
        physical_memory[i].process_id = -1; // Free frame
        physical_memory[i].page_number = -1;
    }
}

// Initialize PCB page table
void initialize_pcb(PCB *pcb) {
    for (int i = 0; i < MAX_PAGES; i++) {
        pcb->page_table[i] = -1; // -1 indicates the page is not in memory
    }
}

// Allocate a page to a frame
int allocate_page(PCB *pcb, int page_number) {
    for (int i = 0; i < NUM_FRAMES; i++) {
        if (physical_memory[i].process_id == -1) { // Free frame found
            physical_memory[i].process_id = pcb->process_id;
            physical_memory[i].page_number = page_number;
            pcb->page_table[page_number] = i;
            printf("Allocated page %d of process %d to frame %d\n",
                   page_number, pcb->process_id, i);
            return 1;
        }
    }
    // No free frames available
    return 0;
}

// FIFO Page Replacement
void fifo_page_replacement(PCB *pcb, int page_number) {
    static int next_frame = 0; // Points to the next frame to be replaced

    printf("Page replacement (FIFO): Replacing frame %d (Process %d, Page %d)\n",
           next_frame, physical_memory[next_frame].process_id,
           physical_memory[next_frame].page_number);

    // Remove old mapping from the replaced process
    int old_process_id = physical_memory[next_frame].process_id;
    int old_page_number = physical_memory[next_frame].page_number;

    if (old_process_id != -1) {
        printf("Evicting page %d of process %d from frame %d\n",
               old_page_number, old_process_id, next_frame);
    }

    // Update frame with new page
    physical_memory[next_frame].process_id = pcb->process_id;
    physical_memory[next_frame].page_number = page_number;
    pcb->page_table[page_number] = next_frame;

    // Move to the next frame
    next_frame = (next_frame + 1) % NUM_FRAMES;
}

// Handle a memory request
void request_memory(PCB *pcb, int page_number) {
    if (page_number < 0 || page_number >= MAX_PAGES) {
        printf("Invalid page number %d for process %d\n", page_number, pcb->process_id);
        return;
    }

    // Check if the page is already in memory
    if (pcb->page_table[page_number] != -1) {
        int frame = pcb->page_table[page_number];
        printf("Page %d of process %d is already in frame %d\n",
               page_number, pcb->process_id, frame);
        return;
    }

    printf("Page fault for page %d of process %d\n", page_number, pcb->process_id);

    // Attempt to allocate the page
    if (!allocate_page(pcb, page_number)) {
        // Perform FIFO page replacement
        fifo_page_replacement(pcb, page_number);
    }
}

// Demo Function
void demo_memory_management() {
    PCB pcb1 = {1}; // Single process
    initialize_pcb(&pcb1);

    // Simulate memory requests for the single process
    request_memory(&pcb1, 0); // Page fault, allocate
    request_memory(&pcb1, 1); // Page fault, allocate
    request_memory(&pcb1, 2); // Page fault, allocate
    request_memory(&pcb1, 3); // Page fault, allocate
    request_memory(&pcb1, 0); // Replace the first page
    // Trigger page replacements
    request_memory(&pcb1, 4); // Replace the second page
    
    printf("Demo complete.\n");
}

// Main Function
int main() {
    initialize_memory();

    printf("=== FIFO Page Replacement Demo (Single Process) ===\n");
    demo_memory_management();

    return 0;
}

